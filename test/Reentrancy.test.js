/* global describe it beforeEach artifacts */

import { expect } from 'chai'

const SimpleDAO = artifacts.require('SimpleDAO')
const EvilContract = artifacts.require('EvilContract')

import { web3 } from './helpers/w3'

const { eth } = web3
const { accounts } = eth

const alice = accounts[0]
const bob = accounts[1]
const carol = accounts[2]

describe('Reentrancy Example', () => {
  let simpleDAO
  let evilContract
  it('runs reentrancy simulation', async () => {
    const amount = 1
    simpleDAO = await SimpleDAO.new()
    evilContract = await EvilContract.new(simpleDAO.address, {from: carol, value: toWei(1.0)})

    logBalances()

    console.log(`    Alice sends ${amount} ETH to SimpleDAO`)
    await addToBalance(alice, amount)
    console.log()

    // console.log(`    Alice sends ${amount} ETH to SimpleDAO`)
    // await addToBalance(alice, amount)
    // console.log()

    console.log(`    Bob sends ${amount} ETH to SimpleDAO`)
    await addToBalance(bob, amount)
    console.log()

    logBalances()

    // 1. Alice successfully withdraws balance from SimpleDAO
    console.log(`    Alice calls withdrawBalance()`)
    await withdrawBalance(alice)
    console.log()

    // 2. Carol uses EvilContract to steal ETH from SimpleDAO
    // console.log(`    Carol sends 0 ETH to EvilContract`)
    // await evilContract.addToSimpleDAO({from: carol})
    // await eth.sendTransaction({to: evilContract.address, from: carol, value: toWei(0)})

    logBalances()
  }).timeout(400000)

  async function addToBalance(address, value) {
    const tx = await simpleDAO.addToBalance({from: address, value: toWei(value)})
    logAddToBalance(tx.logs[0])
  }

  async function withdrawBalance(address) {
    const tx = await simpleDAO.withdrawBalance({from: alice})
    logWithdrawBalance(tx.logs[0])
  }

  function logBalances() {
    console.log()
    console.log(`    Balances`)
    console.log(`    ------------------------------------`)
    console.log(`      SimpleDAO:    ${fromWeiBigNumber(eth.getBalance(simpleDAO.address))} ETH`)
    console.log(`      Alice:        ${fromWeiBigNumber(eth.getBalance(alice))} ETH`)
    console.log(`      Bob:          ${fromWeiBigNumber(eth.getBalance(bob))} ETH`)
    console.log()
    console.log(`      EvilContract: ${fromWeiBigNumber(eth.getBalance(evilContract.address))} ETH`)
    console.log(`      Carol:        ${fromWeiBigNumber(eth.getBalance(carol))} ETH`)
    console.log(`    ------------------------------------`)
    console.log()
  }
})

function logAddToBalance(log) {
  console.log(`      ${log.event} - address: ${log.args._address}, amount: ${fromWei(log.args.amount)} ETH`)
}

function logWithdrawBalance(log) {
  console.log(`      ${log.event} - address: ${log.args._address}, amount: ${fromWei(log.args.amount)} ETH`)
}

function toWei(amount) {
  return amount * 10 ** 18
}

function fromWei(amount) {
  return amount / 10 ** 18
}

function fromWeiBigNumber(amount) {
  return amount.div(10 ** 18).toNumber()
}
