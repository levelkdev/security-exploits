/* global describe it beforeEach artifacts */

import { expect } from 'chai'

const SimpleDAO = artifacts.require('SimpleDAO')
const EvilContract = artifacts.require('EvilContract')

import { web3 } from './w3'

const { eth } = web3
const { accounts } = eth

const alice = accounts[0]
const bob = accounts[1]
const carol = accounts[2]

export default (evil) => {
  describe('Reentrancy Example', () => {

    let simpleDAO
    let evilContract
    it('runs reentrancy simulation', async () => {
      const amount = 500

      console.log(``)
      console.log(`    ----------------------------------------------------------------------------------------------`)
      console.log(``)
      console.log(`      Deploy Contracts`)
      simpleDAO = await SimpleDAO.new()
      evilContract = await EvilContract.new(simpleDAO.address, {from: carol, value: toWei(100.0)})

      logBalances()

      console.log(`      Fund SimpleDAO`)
      console.log(``)
      console.log(`        üë©üèª  Alice sends ${amount} ETH to SimpleDAO`)
      await simpleDAO.addToBalance({from: alice, value: toWei(amount)})
      console.log(``)

      console.log(`        üë®üèæ  Bob sends ${amount} ETH to SimpleDAO`)
      await simpleDAO.addToBalance({from: bob, value: toWei(amount)})

      logBalances()

      // Alice and Bob successfully withdraw balance from SimpleDAO
      if (!evil) {
        console.log(`      Withdraw from SimpleDAO`)
        console.log(``)
        console.log(`        üë©üèª  Alice calls withdrawBalance()`)
        await simpleDAO.withdrawBalance({from: alice})
        console.log(``)
        console.log(`        üë®üèæ  Bob calls withdrawBalance()`)
        await simpleDAO.withdrawBalance({from: bob})
      }

      // Carol uses EvilContract to steal ETH from SimpleDAO
      if (evil) {
        console.log(`      EvilContract Sends To SimpleDAO`)
        console.log(``)
        console.log(`        üòà  Carol makes EvilContract send its ETH to SimpleDAO`)
        await evilContract.addToSimpleDAO({from: carol})

        logBalances()

        console.log(`      Attack Starts`)
        console.log(``)
        console.log(`        üòà  Carol sends 0 ETH to EvilContract to start attack`)
        const tx = await evilContract.send(0, {from: carol, gas: 5000000, value: toWei(0)})
        //const { logs } = await eth.sendTransaction({to: evilContract.address, from: carol, gas: 5000000, value: toWei(0)})
        console.log(`          WithdrawBalance event called ${tx.receipt.logs.length} times`)

        logBalances()

        console.log(`      Carol Steals Funds`)
        console.log(``)
        console.log(`        üòà  Carol kills EvilContract and gets all of the ETH`)
        await evilContract.kill({from: carol})
      }

      logBalances()
    }).timeout(400000)

    function logBalances() {
      console.log(``)
      console.log(`        Balances:`)
      console.log(`          üë©üèª  Alice:        ${fromWeiBigNumber(eth.getBalance(alice))} ETH`)
      console.log(`          üë®üèæ  Bob:          ${fromWeiBigNumber(eth.getBalance(bob))} ETH`)
      if (evil)
        console.log(`          üòà  Carol:        ${fromWeiBigNumber(eth.getBalance(carol))} ETH`)
      console.log()
      console.log(`          üìÑ  SimpleDAO:    ${fromWeiBigNumber(eth.getBalance(simpleDAO.address))} ETH`)
      if (evil)
        console.log(`          üìÑ  EvilContract: ${fromWeiBigNumber(eth.getBalance(evilContract.address))} ETH`)
      console.log(``)
      console.log(`    ----------------------------------------------------------------------------------------------`)
      console.log(``)
    }
  })
}

function logAddToBalance(log) {
  console.log(`          ${log.event} - address: ${log.args._address}, amount: ${fromWei(log.args.amount)} ETH`)
}

function logWithdrawBalance(log) {
  console.log(`          ${log.event} - address: ${log.args._address}, amount: ${fromWei(log.args.amount)} ETH`)
}

function toWei(amount) {
  return amount * 10 ** 18
}

function fromWei(amount) {
  return amount / 10 ** 18
}

function fromWeiBigNumber(amount) {
  return amount.div(10 ** 18).toNumber()
}
